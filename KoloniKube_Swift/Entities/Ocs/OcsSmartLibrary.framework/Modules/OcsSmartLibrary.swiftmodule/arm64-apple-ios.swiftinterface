// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OcsSmartLibrary
import CoreBluetooth
import Darwin
import Foundation
@_exported import OcsSmartLibrary
import Swift
import UIKit
@objc public class BlueSTSDKSTM32WBRebootOtaModeFeature : OcsSmartLibrary.BlueSTSDKFeature {
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  public func rebootToFlash(sectorOffset: Swift.UInt8, numSector: Swift.UInt8)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ExtendedLicense : ObjectiveC.NSObject {
  public static func getLicense(license: Swift.String) throws -> OcsSmartLibrary.ExtendedLicense
  public static func getLicense(license: [Swift.UInt8]) throws -> OcsSmartLibrary.ExtendedLicense
  public func getLicenseToStore() throws -> Swift.String
  public func getEncryptedBytesMaintenanceLicense(withConfiguration: Swift.Bool, withGenerateLicense: Swift.Bool, withConfigureOCS: Swift.Bool, withUpdateFW: Swift.Bool, withOperateMaster: Swift.Bool, withReadEvents: Swift.Bool, withReadConfig: Swift.Bool) throws -> [Swift.UInt8]
  public func getIdLicense() -> Swift.CLong
  public func getMasterCode() -> Swift.String
  public func setMasterCode(masterCode: Swift.String) throws
  public func getUserCodeLength() -> Swift.Int
  public func setUserCodeLength(userCodeLength: Swift.Int) throws
  public func hasConfiguration() -> Swift.Bool
  public func hasGenerateLicenses() -> Swift.Bool
  public func hasConfigureOCS() -> Swift.Bool
  public func hasUpdateFW() -> Swift.Bool
  public func hasOperateMaster() -> Swift.Bool
  public func hasReadEvents() -> Swift.Bool
  public func hasReadConfig() -> Swift.Bool
  public func getUserFrameFreeLocksString(freelocks: Swift.Int) throws -> Swift.String
  public func getUserFrameFreeLocksBytes(freelocks: Swift.Int) throws -> [Swift.UInt8]
  public func getUserFrameDedicatedLocksString(dedicatedlocks: [Swift.Int], userCode: Swift.String) throws -> Swift.String
  public func getUserFrameDedicatedLocksBytes(dedicatedlocks: [Swift.Int], userCode: Swift.String) throws -> [Swift.UInt8]
  public func generateMasterFrame() -> Swift.String
  public func generateConfigForFreeLock(lockNumber: Swift.Int, newMasterCode: Swift.String, blockKeypad: Swift.Bool, rentTime: Swift.Int, automaticOpening: OcsSmartLibrary.AutomaticOpening?, buzzerOn: Swift.Bool, ledType: Swift.Int) throws -> Swift.String
  public func generateConfigForDedicatedLock(lockNumber: Swift.Int, newMasterCode: Swift.String, userCode: Swift.String, blockKeypad: Swift.Bool, buzzerOn: Swift.Bool, ledType: Swift.Int, expirationDate: Foundation.Date?, automaticClosing: Swift.Bool) throws -> Swift.String
  public func generateReadConfigRequestFrame() -> Swift.String
  public func generateReadEventsRequestFrame() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public typealias featureMask_t = Swift.UInt32
@objc extension CBUUID {
  @objc dynamic public var featureMask: OcsSmartLibrary.featureMask_t {
    @objc get
  }
}
@objc extension CBCharacteristic {
  @objc dynamic public var isFeatureCaracteristics: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isFeatureGeneralPurposeCharacteristics: Swift.Bool {
    @objc get
  }
  @objc dynamic public var extendedFeature: [OcsSmartLibrary.BlueSTSDKFeature.Type]? {
    @objc get
  }
}
@objc extension CBService {
  @objc dynamic public var isDebugService: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isConfigService: Swift.Bool {
    @objc get
  }
}
@objc extension CBCharacteristic {
  @objc dynamic public var isDebugCharacteristic: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isDebugTermCharacteristic: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isDebugErrorCharacteristic: Swift.Bool {
    @objc get
  }
}
@objc extension CBCharacteristic {
  @objc dynamic public var isConfigCharacteristics: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isConfigControlCharacteristic: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isConfigFeatureCommandCharacteristic: Swift.Bool {
    @objc get
  }
}
public enum LockType : Swift.UInt8 {
  case FREE_LOCK
  case DEDICATED_LOCK
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum LockStatus : Swift.UInt8 {
  case OPEN
  case CLOSED
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public class OcsLock : ObjectiveC.NSObject {
  public init(node: OcsSmartLibrary.BlueSTSDKNode)
  public func getLockNumber() -> Swift.UInt32
  public func getLockType() -> OcsSmartLibrary.LockType
  public func getLockStatus() -> OcsSmartLibrary.LockStatus
  public func getTag() -> Swift.String
  public func getRSSI() -> Swift.Int
  public func isInUserMode() -> Swift.Bool
  public func hasStartBeenPressed() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public class BlueSTSDKFeatureAILogging : OcsSmartLibrary.BlueSTSDKFeature {
  public enum Status : Swift.UInt8 {
    public typealias RawValue = Swift.UInt8
    case stoped
    case started
    case missingSD
    case ioError
    case upgrede
    case unknown
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public struct Parameters {
    public let featureMask: Swift.UInt32
    public let environmentalFrequencyHz: Swift.Float
    public let inertialFrequencyHz: Swift.Float
    public let audioVolume: Swift.Float
    public init(featureMask: Swift.UInt32, environmentalFrequencyHz: Swift.Float, inertialFrequencyHz: Swift.Float, audioVolume: Swift.Float)
  }
  public static func getLoggingStatus(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeatureAILogging.Status
  public static func isLogging(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Bool
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  public func startLogging(_ param: OcsSmartLibrary.BlueSTSDKFeatureAILogging.Parameters)
  public func stopLogging()
  public func updateAnnotation(_ label: Swift.String)
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
final public class AES {
  public enum Error : Swift.Error {
    case invalidKeySize
    case dataPaddingRequired
    case invalidData
    public static func == (a: OcsSmartLibrary.AES.Error, b: OcsSmartLibrary.AES.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Variant : Swift.Int {
    case aes128, aes192, aes256
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  final public let variant: OcsSmartLibrary.AES.Variant
  public init(key: Swift.Array<Swift.UInt8>, blockMode: OcsSmartLibrary.BlockMode, padding: OcsSmartLibrary.Padding = .pkcs7) throws
  @objc deinit
}
extension AES : OcsSmartLibrary.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
public protocol AEAD {
  static var kLen: Swift.Int { get }
  static var ivRange: Swift.Range<Swift.Int> { get }
}
final public class SHA2 {
  public enum Variant : Swift.RawRepresentable {
    case sha224, sha256, sha384, sha512
    public var digestLength: Swift.Int {
      get
    }
    public var blockSize: Swift.Int {
      get
    }
    public typealias RawValue = Swift.Int
    public var rawValue: OcsSmartLibrary.SHA2.Variant.RawValue {
      get
    }
    public init?(rawValue: OcsSmartLibrary.SHA2.Variant.RawValue)
  }
  public init(variant: OcsSmartLibrary.SHA2.Variant)
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension SHA2 : OcsSmartLibrary.Updatable {
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
extension PKCS5 {
  public struct PBKDF2 {
    public enum Error : Swift.Error {
      case invalidInput
      case derivedKeyTooLong
      public static func == (a: OcsSmartLibrary.PKCS5.PBKDF2.Error, b: OcsSmartLibrary.PKCS5.PBKDF2.Error) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, iterations: Swift.Int = 4096, keyLength: Swift.Int? = nil, variant: OcsSmartLibrary.HMAC.Variant = .sha256) throws
    public func calculate() throws -> Swift.Array<Swift.UInt8>
  }
}
extension ChaCha20 {
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
public protocol PaddingProtocol {
  func add(to: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
  func remove(from: Swift.Array<Swift.UInt8>, blockSize: Swift.Int?) -> Swift.Array<Swift.UInt8>
}
public enum Padding : OcsSmartLibrary.PaddingProtocol {
  case noPadding, zeroPadding, pkcs7, pkcs5, iso78164
  public func add(to: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
  public func remove(from: Swift.Array<Swift.UInt8>, blockSize: Swift.Int?) -> Swift.Array<Swift.UInt8>
  public static func == (a: OcsSmartLibrary.Padding, b: OcsSmartLibrary.Padding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class SHA3 {
  final public let blockSize: Swift.Int
  final public let digestLength: Swift.Int
  final public let markByte: Swift.UInt8
  public enum Variant {
    case sha224, sha256, sha384, sha512, keccak224, keccak256, keccak384, keccak512
    public var outputLength: Swift.Int {
      get
    }
    public static func == (a: OcsSmartLibrary.SHA3.Variant, b: OcsSmartLibrary.SHA3.Variant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(variant: OcsSmartLibrary.SHA3.Variant)
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension SHA3 : OcsSmartLibrary.Updatable {
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
@objc public class BlueSTSDKSTM32WBOtaUploadFeature : OcsSmartLibrary.BlueSTSDKFeature {
  public var CHUNK_LENGTH: Swift.Int
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  public func setMtuLength(mtuLength: Swift.Int)
  public func upload(file: Foundation.Data, onWrite: @escaping (Swift.UInt) -> ())
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
final public class GCM : OcsSmartLibrary.BlockMode {
  public enum Mode {
    case combined
    case detached
    public static func == (a: OcsSmartLibrary.GCM.Mode, b: OcsSmartLibrary.GCM.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let options: OcsSmartLibrary.BlockModeOption
  public enum Error : Swift.Error {
    case invalidInitializationVector
    case fail
    public static func == (a: OcsSmartLibrary.GCM.Error, b: OcsSmartLibrary.GCM.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(iv: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, tagLength: Swift.Int = 16, mode: OcsSmartLibrary.GCM.Mode = .detached)
  convenience public init(iv: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, mode: OcsSmartLibrary.GCM.Mode = .detached)
  final public func worker(blockSize: Swift.Int, cipherOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock, encryptionOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock) throws -> OcsSmartLibrary.CipherModeWorker
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class BlueSTSDKFeatureAudioADPCM : OcsSmartLibrary.BlueSTSDKFeatureGenericAudio, OcsSmartLibrary.BlueSTSDKAudioDecoder {
  public var codecManager: OcsSmartLibrary.BlueSTSDKAudioCodecManager {
    get
  }
  public func getAudio(from sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Foundation.Data?
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  public static func getLinearPCMAudio(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Foundation.Data?
  @objc override dynamic public func description() -> Swift.String
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
@objc public class BlueSTSDKFeatureEventCounter : OcsSmartLibrary.BlueSTSDKFeature {
  public static func getCounter(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.UInt32
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
extension Collection where Self.Element == Swift.UInt8 {
  public var data: Foundation.Data {
    get
  }
  public var uint16: Swift.UInt16 {
    get
  }
  public var uint32: Swift.UInt32 {
    get
  }
}
public protocol CipherModeWorker {
  var cipherOperation: OcsSmartLibrary.CipherOperationOnBlock { get }
  var additionalBufferSize: Swift.Int { get }
  mutating func encrypt(block plaintext: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  mutating func decrypt(block ciphertext: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
}
public protocol BlockModeWorker : OcsSmartLibrary.CipherModeWorker {
  var blockSize: Swift.Int { get }
}
public protocol CounterModeWorker : OcsSmartLibrary.CipherModeWorker {
  associatedtype Counter
  var counter: Self.Counter { get set }
}
public protocol SeekableModeWorker : OcsSmartLibrary.CipherModeWorker {
  mutating func seek(to position: Swift.Int) throws
}
public protocol StreamModeWorker : OcsSmartLibrary.CipherModeWorker {
}
public protocol FinalizingEncryptModeWorker : OcsSmartLibrary.CipherModeWorker {
  mutating func finalize(encrypt ciphertext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
}
public protocol FinalizingDecryptModeWorker : OcsSmartLibrary.CipherModeWorker {
  @discardableResult
  mutating func willDecryptLast(bytes ciphertext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
  mutating func didDecryptLast(bytes plaintext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
  mutating func finalize(decrypt plaintext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
}
@objc public class BlueSTSDKFeatureFitnessActivity : OcsSmartLibrary.BlueSTSDKFeature {
  public enum ActivityType : Swift.UInt8, Swift.CaseIterable {
    public typealias RawValue = Swift.UInt8
    case noActivity
    case bicep_curl
    case squat
    case push_up
    public init?(rawValue: Swift.UInt8)
    public typealias AllCases = [OcsSmartLibrary.BlueSTSDKFeatureFitnessActivity.ActivityType]
    public static var allCases: [OcsSmartLibrary.BlueSTSDKFeatureFitnessActivity.ActivityType] {
      get
    }
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public static func getActivityType(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeatureFitnessActivity.ActivityType?
  public static func getActivityCount(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.UInt16?
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  public func enableActivity(_ activity: OcsSmartLibrary.BlueSTSDKFeatureFitnessActivity.ActivityType)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
extension PKCS5 {
  public struct PBKDF1 {
    public enum Error : Swift.Error {
      case invalidInput
      case derivedKeyTooLong
      public static func == (a: OcsSmartLibrary.PKCS5.PBKDF1.Error, b: OcsSmartLibrary.PKCS5.PBKDF1.Error) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Variant {
      case md5, sha1
      public static func == (a: OcsSmartLibrary.PKCS5.PBKDF1.Variant, b: OcsSmartLibrary.PKCS5.PBKDF1.Variant) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, variant: OcsSmartLibrary.PKCS5.PBKDF1.Variant = .sha1, iterations: Swift.Int = 4096, keyLength: Swift.Int? = nil) throws
    public func calculate() -> Swift.Array<Swift.UInt8>
  }
}
public enum NodeBoardType : Swift.UInt8 {
  case USER_APP
  case OTA
  case UNKNOWN
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol BlueSTSDKAudioCodecSettings {
  var codecName: Swift.String { get }
  var samplingFequency: Swift.Int { get }
  var channels: Swift.Int { get }
  var bytesPerSample: Swift.Int { get }
  var samplePerBlock: Swift.Int { get }
}
public protocol BlueSTSDKAudioCodecManager : OcsSmartLibrary.BlueSTSDKAudioCodecSettings {
  var isAudioEnabled: Swift.Bool { get }
  func reinit()
  func updateParameters(from: OcsSmartLibrary.BlueSTSDKFeatureSample)
}
public protocol BlueSTSDKAudioDecoder {
  func getAudio(from: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Foundation.Data?
  var codecManager: OcsSmartLibrary.BlueSTSDKAudioCodecManager { get }
}
@objc public class BlueSTSDKFeatureGenericAudio : OcsSmartLibrary.BlueSTSDKDeviceTimestampFeature {
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc override dynamic public func notifyUpdate(with sample: OcsSmartLibrary.BlueSTSDKFeatureSample?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class BlueSTSDKFeatureMotorTimeParameters : OcsSmartLibrary.BlueSTSDKFeature {
  public static let FEATURE_NAME: Swift.String
  public static let FEATURE_ACC_UNIT: Swift.String
  public static let FEATURE_SPEED_UNIT: Swift.String
  public static let DATA_ACC_MAX: Swift.Double
  public static let DATA_ACC_MIN: Swift.Double
  public static let DATA_SPEED_MAX: Swift.Double
  public static let DATA_SPEED_MIN: Swift.Double
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  public static func getAccPeackX(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getAccPeackY(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getAccPeackZ(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getRMSSpeedX(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getRMSSpeedY(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getRMSSpeedZ(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
public enum BlueSTSDKFwUpgradeError : Swift.Error {
  case corruptedFile
  case trasmissionError
  case invalidFwFile
  case unsupportedOperation
  case unknownError
  public static func == (a: OcsSmartLibrary.BlueSTSDKFwUpgradeError, b: OcsSmartLibrary.BlueSTSDKFwUpgradeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BlueSTSDKFwUpgradeConsoleCallback {
  func onLoadComplite(file: Foundation.URL)
  func onLoadError(file: Foundation.URL, error: OcsSmartLibrary.BlueSTSDKFwUpgradeError)
  func onLoadProgres(file: Foundation.URL, remainingBytes: Swift.UInt, uploadedBytes: Swift.UInt)
}
public enum BlueSTSDKFwUpgradeType : Swift.UInt8 {
  case BLE_FW
  case BOARD_FW
  case DOUBLE_FW_APP
  case DOUBLE_FW_WS
  case NO_FW
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public class BlueSTSDKFeatureGyroscopeNorm : OcsSmartLibrary.BlueSTSDKFeature {
  public static func getNorm(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BlueSTSDKAdvertiseParser : OcsSmartLibrary.BlueSTSDKAdvertiseFilter {
  @objc public func filter(_ data: [Swift.String : Any]) -> OcsSmartLibrary.BleAdvertiseInfo?
  @objc deinit
}
@objc public class BlueSTSDKFeatureEulerAngle : OcsSmartLibrary.BlueSTSDKFeatureAutoConfigurable {
  public static func getYaw(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getPitch(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getRoll(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
final public class ChaCha20 {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    case notSupported
    public static func == (a: OcsSmartLibrary.ChaCha20.Error, b: OcsSmartLibrary.ChaCha20.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>, iv nonce: Swift.Array<Swift.UInt8>) throws
  @objc deinit
}
extension ChaCha20 : OcsSmartLibrary.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension ChaCha20 {
  public struct ChaChaEncryptor : OcsSmartLibrary.Cryptor, OcsSmartLibrary.Updatable {
    public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
    public func seek(to: Swift.Int) throws
  }
}
extension ChaCha20 {
  public struct ChaChaDecryptor : OcsSmartLibrary.Cryptor, OcsSmartLibrary.Updatable {
    public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = true) throws -> Swift.Array<Swift.UInt8>
    public func seek(to: Swift.Int) throws
  }
}
extension ChaCha20 : OcsSmartLibrary.Cryptors {
  final public func makeEncryptor() -> OcsSmartLibrary.Cryptor & OcsSmartLibrary.Updatable
  final public func makeDecryptor() -> OcsSmartLibrary.Cryptor & OcsSmartLibrary.Updatable
}
public protocol Cryptor {
  mutating func seek(to: Swift.Int) throws
}
final public class Scrypt {
  public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, dkLen: Swift.Int, N: Swift.Int, r: Swift.Int, p: Swift.Int) throws
  final public func calculate() throws -> [Swift.UInt8]
  @objc deinit
}
@objc public class BlueSTSDKFeatureFiniteStateMachine : OcsSmartLibrary.BlueSTSDKFeature {
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  public static func getRegisterStatus(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> [Swift.UInt8]
  public static func getRegisterStatus(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample, index: Swift.Int) -> Swift.UInt8?
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
extension String {
  public func decryptBase64ToString(cipher: OcsSmartLibrary.Cipher) throws -> Swift.String
  public func decryptBase64(cipher: OcsSmartLibrary.Cipher) throws -> Swift.Array<Swift.UInt8>
}
public struct BlockModeOption : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = OcsSmartLibrary.BlockModeOption
  public typealias Element = OcsSmartLibrary.BlockModeOption
  public typealias RawValue = Swift.Int
}
@available(*, renamed: "Digest")
public typealias Hash = OcsSmartLibrary.Digest
public struct Digest {
  public static func md5(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha1(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha224(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha256(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha384(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha512(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha2(_ bytes: Swift.Array<Swift.UInt8>, variant: OcsSmartLibrary.SHA2.Variant) -> Swift.Array<Swift.UInt8>
  public static func sha3(_ bytes: Swift.Array<Swift.UInt8>, variant: OcsSmartLibrary.SHA3.Variant) -> Swift.Array<Swift.UInt8>
}
public enum Bit : Swift.Int {
  case zero
  case one
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class BlueSTSDKManager : ObjectiveC.NSObject {
  public static let DEFAULT_ADVERTISE_FILTER: [OcsSmartLibrary.BlueSTSDKAdvertiseFilter]
  @objc public static let sharedInstance: OcsSmartLibrary.BlueSTSDKManager
  @objc public var nodes: [OcsSmartLibrary.BlueSTSDKNode] {
    get
  }
  @objc public var isDiscovering: Swift.Bool {
    @objc get
  }
  @objc public func setMinRSSI(_ minRSSI: Swift.Int)
  @objc public func discoveryStart()
  @objc public func discoveryStart(_ timeoutMs: Swift.Int)
  @objc public func discoveryStart(_ timeoutMs: Swift.Int, advertiseFilters: [OcsSmartLibrary.BlueSTSDKAdvertiseFilter])
  @objc public func discoveryStop()
  @objc public func resetDiscovery()
  @objc public func resetDiscovery(_ disconnectAll: Swift.Bool)
  @objc public func removeNode(node: OcsSmartLibrary.BlueSTSDKNode)
  @objc public func addVirtualNode()
  @objc public func nodeWith(name: Swift.String) -> OcsSmartLibrary.BlueSTSDKNode?
  public func nodeWith(tag: Swift.String) -> OcsSmartLibrary.BlueSTSDKNode?
  @objc public func addFeatureForNode(nodeId: Swift.UInt8, features: [Swift.UInt32 : OcsSmartLibrary.BlueSTSDKFeature.Type]) throws
  @objc public func getFeaturesForNode(_ nodeId: Swift.UInt8) -> [Foundation.NSNumber : OcsSmartLibrary.BlueSTSDKFeature.Type]
  @objc public func removeDelegate(_ delegate: OcsSmartLibrary.BlueSTSDKManagerDelegate)
  @available(*, deprecated, message: "Use removeDelegate")
  @objc public func remove(_ delegate: OcsSmartLibrary.BlueSTSDKManagerDelegate)
  @objc public func addDelegate(_ delegate: OcsSmartLibrary.BlueSTSDKManagerDelegate)
  @available(*, deprecated, message: "Use addDelegate")
  @objc public func add(_ delegate: OcsSmartLibrary.BlueSTSDKManagerDelegate)
  @objc public func connect(_ peripheral: CoreBluetooth.CBPeripheral)
  @objc public func disconnect(_ peripheral: CoreBluetooth.CBPeripheral)
  @objc deinit
}
@objc public protocol BlueSTSDKManagerDelegate {
  @objc func manager(_ manager: OcsSmartLibrary.BlueSTSDKManager, didDiscoverNode: OcsSmartLibrary.BlueSTSDKNode)
  @objc func manager(_ manager: OcsSmartLibrary.BlueSTSDKManager, didChangeDiscovery: Swift.Bool)
}
extension BlueSTSDKManager : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension BlueSTSDKDebug {
  public func writeWithoutQueue(_ msg: Swift.String)
  @objc public static func stringToData(_ str: Swift.String) -> Foundation.Data?
  @objc public static func dataToString(_ data: Foundation.Data) -> Swift.String?
}
final public class OCB : OcsSmartLibrary.BlockMode {
  public enum Mode {
    case combined
    case detached
    public static func == (a: OcsSmartLibrary.OCB.Mode, b: OcsSmartLibrary.OCB.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let options: OcsSmartLibrary.BlockModeOption
  public enum Error : Swift.Error {
    case invalidNonce
    case fail
    public static func == (a: OcsSmartLibrary.OCB.Error, b: OcsSmartLibrary.OCB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(nonce N: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, tagLength: Swift.Int = 16, mode: OcsSmartLibrary.OCB.Mode = .detached)
  convenience public init(nonce N: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, mode: OcsSmartLibrary.OCB.Mode = .detached)
  final public func worker(blockSize: Swift.Int, cipherOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock, encryptionOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock) throws -> OcsSmartLibrary.CipherModeWorker
  @objc deinit
}
final public class SHA1 {
  public init()
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension SHA1 : OcsSmartLibrary.Updatable {
  @discardableResult
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
@objc public class BlueSTSDKFeatureAudioADPCMSync : OcsSmartLibrary.BlueSTSDKFeatureGenericAudio {
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BlockDecryptor : OcsSmartLibrary.Cryptor, OcsSmartLibrary.Updatable {
  public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
  public func seek(to position: Swift.Int) throws
  @objc deinit
}
public struct HKDF {
  public enum Error : Swift.Error {
    case invalidInput
    case derivedKeyTooLong
    public static func == (a: OcsSmartLibrary.HKDF.Error, b: OcsSmartLibrary.HKDF.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>? = nil, info: Swift.Array<Swift.UInt8>? = nil, keyLength: Swift.Int? = nil, variant: OcsSmartLibrary.HMAC.Variant = .sha256) throws
  public func calculate() throws -> Swift.Array<Swift.UInt8>
}
public enum PKCS5 {
}
@objc public class BlueSTSDKFeaturePredictiveSpeedStatus : OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus {
  public typealias Status = OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus.Status
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  public static func getStatusX(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeaturePredictiveSpeedStatus.Status
  public static func getStatusY(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeaturePredictiveSpeedStatus.Status
  public static func getStatusZ(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeaturePredictiveSpeedStatus.Status
  public static func getSpeedX(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getSpeedY(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getSpeedZ(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
extension Blowfish {
  convenience public init(key: Swift.String, iv: Swift.String, padding: OcsSmartLibrary.Padding = .pkcs7) throws
}
@objc public protocol BleAdvertiseInfo : ObjectiveC.NSObjectProtocol {
  @objc var name: Swift.String? { get }
  @objc var address: Swift.String? { get }
  @objc var featureMap: Swift.UInt32 { get }
  @objc var deviceId: Swift.UInt8 { get }
  @objc var protocolVersion: Swift.UInt8 { get }
  @objc var boardType: OcsSmartLibrary.BlueSTSDKNodeType { get }
  @objc var isSleeping: Swift.Bool { get }
  @objc var hasGeneralPurpose: Swift.Bool { get }
  @objc var txPower: Swift.UInt8 { get }
}
@objc public protocol BlueSTSDKAdvertiseFilter {
  @objc func filter(_ data: [Swift.String : Any]) -> OcsSmartLibrary.BleAdvertiseInfo?
}
@objc public class BlueSTSDKFeatureMotionAlogrithm : OcsSmartLibrary.BlueSTSDKFeature {
  public enum Algorithm : Swift.UInt8, Swift.CaseIterable {
    public typealias RawValue = Swift.UInt8
    case none
    case poseEstimation
    case deskTypeDetection
    case verticalContext
    public init?(rawValue: Swift.UInt8)
    public typealias AllCases = [OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.Algorithm]
    public static var allCases: [OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.Algorithm] {
      get
    }
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public enum PoseEstimation : Swift.UInt8, Swift.CaseIterable {
    public typealias RawValue = Swift.UInt8
    case unknown
    case sitting
    case standing
    case layingDown
    public init?(rawValue: Swift.UInt8)
    public typealias AllCases = [OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.PoseEstimation]
    public static var allCases: [OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.PoseEstimation] {
      get
    }
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public enum VerticalContext : Swift.UInt8, Swift.CaseIterable {
    public typealias RawValue = Swift.UInt8
    case unknown
    case floor
    case upDown
    case stairs
    case elevator
    case escalator
    public init?(rawValue: Swift.UInt8)
    public typealias AllCases = [OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.VerticalContext]
    public static var allCases: [OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.VerticalContext] {
      get
    }
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public enum DeskTypeDetection : Swift.UInt8, Swift.CaseIterable {
    public typealias RawValue = Swift.UInt8
    case unknown
    case sittingDesk
    case standingDesk
    public init?(rawValue: Swift.UInt8)
    public typealias AllCases = [OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.DeskTypeDetection]
    public static var allCases: [OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.DeskTypeDetection] {
      get
    }
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public static func getAlgorithmType(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.Algorithm?
  public static func getVerticalContext(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.VerticalContext?
  public static func getPoseEstimation(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.PoseEstimation?
  public static func getDetectedDeskType(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.DeskTypeDetection?
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  public func enableAlgorithm(_ algo: OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.Algorithm)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LocalDateAndTime {
  public static func getCurrentTimestamp() -> Swift.CLong
  public static func getTimestampFromDate(date: Foundation.Date) -> Swift.CLong
  @objc deinit
}
@objc public class BlueSTSDKFeatureFFTAmplitude : OcsSmartLibrary.BlueSTSDKDeviceTimestampFeature {
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  public static func isComplete(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Bool
  public static func getDataLoadPercentage(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.UInt8
  public static func getNSample(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.UInt
  public static func getNComponents(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.UInt
  public static func getFrequencySteps(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getComponent(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample, index: Swift.Int) -> [Swift.Float]?
  public static func getXComponent(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> [Swift.Float]?
  public static func getYComponent(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> [Swift.Float]?
  public static func getZComponent(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> [Swift.Float]?
  public static func getComponents(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> [[Swift.Float]]?
  @objc override dynamic public func enableNotification() -> Swift.Bool
  @objc override dynamic public func disableNotification() -> Swift.Bool
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
public struct ECB : OcsSmartLibrary.BlockMode {
  public let options: OcsSmartLibrary.BlockModeOption
  public init()
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock, encryptionOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock) throws -> OcsSmartLibrary.CipherModeWorker
}
extension HMAC {
  convenience public init(key: Swift.String, variant: OcsSmartLibrary.HMAC.Variant = .md5) throws
}
@_hasMissingDesignatedInitializers public class Parser {
  @objc deinit
}
public struct OFB : OcsSmartLibrary.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: OcsSmartLibrary.OFB.Error, b: OcsSmartLibrary.OFB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: OcsSmartLibrary.BlockModeOption
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock, encryptionOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock) throws -> OcsSmartLibrary.CipherModeWorker
}
@objc public class BlueSTSDKSTM32WBOTAWillRebootFeature : OcsSmartLibrary.BlueSTSDKDeviceTimestampFeature {
  public static func isRebooting(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Bool
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  public static func boardIsRebooting(sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Bool
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
extension String {
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
  public func md5() -> Swift.String
  public func sha1() -> Swift.String
  public func sha224() -> Swift.String
  public func sha256() -> Swift.String
  public func sha384() -> Swift.String
  public func sha512() -> Swift.String
  public func sha3(_ variant: OcsSmartLibrary.SHA3.Variant) -> Swift.String
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.String
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.String
  public func crc16(seed: Swift.UInt16? = nil) -> Swift.String
  public func encrypt(cipher: OcsSmartLibrary.Cipher) throws -> Swift.String
  public func encryptToBase64(cipher: OcsSmartLibrary.Cipher) throws -> Swift.String?
  public func authenticate<A>(with authenticator: A) throws -> Swift.String where A : OcsSmartLibrary.Authenticator
}
extension Data {
  public func checksum() -> Swift.UInt16
  public func md5() -> Foundation.Data
  public func sha1() -> Foundation.Data
  public func sha224() -> Foundation.Data
  public func sha256() -> Foundation.Data
  public func sha384() -> Foundation.Data
  public func sha512() -> Foundation.Data
  public func sha3(_ variant: OcsSmartLibrary.SHA3.Variant) -> Foundation.Data
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Foundation.Data
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Foundation.Data
  public func crc16(seed: Swift.UInt16? = nil) -> Foundation.Data
  public func encrypt(cipher: OcsSmartLibrary.Cipher) throws -> Foundation.Data
  public func decrypt(cipher: OcsSmartLibrary.Cipher) throws -> Foundation.Data
  public func authenticate(with authenticator: OcsSmartLibrary.Authenticator) throws -> Foundation.Data
}
extension Data {
  public init(hex: Swift.String)
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
  public func toHexString() -> Swift.String
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DynamicKeyContainer : ObjectiveC.NSObject {
  public static let sharedInstance: OcsSmartLibrary.DynamicKeyContainer
  public func setAesDynamic(aes: OcsSmartLibrary.AES)
  public func getAesDynamic() -> OcsSmartLibrary.AES
  @objc deinit
}
@objc public class BlueSTSDKFeatureActivity : OcsSmartLibrary.BlueSTSDKFeature {
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  public static func getAlgorithmId(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.UInt8
  public static func getType(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeatureActivity.ActivityType
  public static func getDate(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Foundation.Date?
  public enum ActivityType : Swift.UInt8 {
    public typealias RawValue = Swift.UInt8
    case noActivity
    case standing
    case walking
    case fastWalking
    case jogging
    case biking
    case driving
    case stairs
    case adultInCar
    case error
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
extension Array where Element == Swift.UInt8 {
  public func toBase64() -> Swift.String?
  public init(base64: Swift.String)
}
@objc public class BlueSTSDKFeatureMemsNorm : OcsSmartLibrary.BlueSTSDKFeature {
  public static func getNorm(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
public enum CipherError : Swift.Error {
  case encrypt
  case decrypt
  public static func == (a: OcsSmartLibrary.CipherError, b: OcsSmartLibrary.CipherError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Cipher : AnyObject {
  var keySize: Swift.Int { get }
  func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func encrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func decrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension Cipher {
  public func encrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func decrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension Rabbit {
  convenience public init(key: Swift.String) throws
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
@objc public class FeatureRx : OcsSmartLibrary.BlueSTSDKFeature {
  public static let RX_CHAR_SIZE: Swift.Int
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  public static func getValue(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Array<Swift.UInt8>
  public static func isHandshakeResponse(decryptedValue: Swift.String) -> Swift.Bool
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AEADChaCha20Poly1305 : OcsSmartLibrary.AEAD {
  public static let kLen: Swift.Int
  public static var ivRange: Swift.Range<Swift.Int>
  public static func encrypt(_ plainText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>) throws -> (cipherText: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>)
  public static func decrypt(_ cipherText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>) throws -> (plainText: Swift.Array<Swift.UInt8>, success: Swift.Bool)
  @objc deinit
}
public typealias CipherOperationOnBlock = (Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>?
public protocol BlockMode {
  var options: OcsSmartLibrary.BlockModeOption { get }
  func worker(blockSize: Swift.Int, cipherOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock, encryptionOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock) throws -> OcsSmartLibrary.CipherModeWorker
}
public struct CBC : OcsSmartLibrary.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: OcsSmartLibrary.CBC.Error, b: OcsSmartLibrary.CBC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: OcsSmartLibrary.BlockModeOption
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock, encryptionOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock) throws -> OcsSmartLibrary.CipherModeWorker
}
@objc @_inheritsConvenienceInitializers public class BlueSTSDKFeaturePredictiveStatus : OcsSmartLibrary.BlueSTSDKFeature {
  public enum Status : Swift.UInt8 {
    case GOOD
    case WARNING
    case BAD
    case UNKNOWN
    public static func fromByte(_ val: Swift.UInt8) -> OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus.Status
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BlueSTSDKSTM32WBOTAUtils {
  public static let OTA_NODE_ID: Swift.UInt8
  public static let DEFAULT_FW_ADDRESS: Swift.UInt32
  public static func isOTANode(_ n: OcsSmartLibrary.BlueSTSDKNode) -> Swift.Bool
  public static func getOtaCharacteristics() -> [CoreBluetooth.CBUUID : [Swift.AnyClass]]
  public static func getOtaAddressForNode(_ n: OcsSmartLibrary.BlueSTSDKNode) -> Swift.String?
  @objc deinit
}
@objc public class BlueSTSDKFeatureMachineLearningCore : OcsSmartLibrary.BlueSTSDKFeature {
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  public static func getRegisterStatus(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> [Swift.UInt8]
  public static func getRegisterStatus(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample, index: Swift.Int) -> Swift.UInt8?
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
extension Data {
  public var byteArray: [Swift.UInt8] {
    get
  }
  public var uint8: Swift.UInt8 {
    get
  }
  public var uint16: Swift.UInt16 {
    get
  }
  public var uint32: Swift.UInt32 {
    get
  }
  public var uuid: Foundation.NSUUID? {
    get
  }
  public var stringASCII: Swift.String? {
    get
  }
  public var stringUTF8: Swift.String? {
    get
  }
  public init?(hexString: Swift.String)
  public struct HexEncodingOptions : Swift.OptionSet {
    public let rawValue: Swift.Int
    public static let upperCase: Foundation.Data.HexEncodingOptions
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = Foundation.Data.HexEncodingOptions
    public typealias Element = Foundation.Data.HexEncodingOptions
    public typealias RawValue = Swift.Int
  }
  public func hexEncodedString(options: Foundation.Data.HexEncodingOptions = []) -> Swift.String
}
public struct CTR {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: OcsSmartLibrary.CTR.Error, b: OcsSmartLibrary.CTR.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: OcsSmartLibrary.BlockModeOption
  public init(iv: Swift.Array<Swift.UInt8>, counter: Swift.Int = 0)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock, encryptionOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock) throws -> OcsSmartLibrary.CipherModeWorker
}
final public class MD5 {
  public init()
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension MD5 : OcsSmartLibrary.Updatable {
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
extension AES : OcsSmartLibrary.Cryptors {
  final public func makeEncryptor() throws -> OcsSmartLibrary.Cryptor & OcsSmartLibrary.Updatable
  final public func makeDecryptor() throws -> OcsSmartLibrary.Cryptor & OcsSmartLibrary.Updatable
}
public enum LicenseException : Swift.Error {
  case Creating
  case Parsing
  case MasterCode
  case UserCodeLength
  case UserCode
  case FreeLocks
  case DedicatedLocks
  case LockNumber
  case OperationTime
  case RentTime
  case Unknown
  public static func == (a: OcsSmartLibrary.LicenseException, b: OcsSmartLibrary.LicenseException) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IncorrectFrameException : Swift.Error {
  case IncorrectFrame
  public static func == (a: OcsSmartLibrary.IncorrectFrameException, b: OcsSmartLibrary.IncorrectFrameException) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class License : ObjectiveC.NSObject {
  public static func getLicense(license: Swift.String) throws -> OcsSmartLibrary.License
  public static func getLicense(license: [Swift.UInt8]) throws -> OcsSmartLibrary.License
  public static func getFactoryDefault() throws -> OcsSmartLibrary.License
  public func processEvent(event: OcsSmartLibrary.Event) -> Swift.Bool
  public func updateUserCode(userCode: Swift.String) -> Swift.Bool
  public func getLicenseToStore() throws -> Swift.String
  public func getFreeLocks() -> [Swift.Int]
  public func getDedicatedLocks() -> [Swift.Int]
  public func getUserCode() -> Swift.String
  public func getUserCodeLength() -> Swift.Int
  public func getIdLicense() -> Swift.Int
  public func getFrame() -> Swift.String
  public func isSmartConnection() -> Swift.Bool
  public func getFirstLock() -> Swift.Int
  public func isValidLock(lock: OcsSmartLibrary.OcsLock) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
final public class Blowfish {
  public enum Error : Swift.Error {
    case dataPaddingRequired
    case invalidKeyOrInitializationVector
    case invalidInitializationVector
    case invalidBlockMode
    public static func == (a: OcsSmartLibrary.Blowfish.Error, b: OcsSmartLibrary.Blowfish.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>, blockMode: OcsSmartLibrary.BlockMode = CBC(iv: Array<UInt8>(repeating: 0, count: Blowfish.blockSize)), padding: OcsSmartLibrary.Padding) throws
  @objc deinit
}
extension Blowfish : OcsSmartLibrary.Cipher {
  final public func encrypt<C>(_ bytes: C) throws -> Swift.Array<Swift.UInt8> where C : Swift.Collection, C.Element == Swift.UInt8, C.Index == Swift.Int
  final public func decrypt<C>(_ bytes: C) throws -> Swift.Array<Swift.UInt8> where C : Swift.Collection, C.Element == Swift.UInt8, C.Index == Swift.Int
}
final public class Rabbit {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    public static func == (a: OcsSmartLibrary.Rabbit.Error, b: OcsSmartLibrary.Rabbit.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let ivSize: Swift.Int
  public static let keySize: Swift.Int
  public static let blockSize: Swift.Int
  final public var keySize: Swift.Int {
    get
  }
  convenience public init(key: Swift.Array<Swift.UInt8>) throws
  public init(key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>?) throws
  @objc deinit
}
extension Rabbit : OcsSmartLibrary.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
@_hasMissingDesignatedInitializers public class AutomaticOpening {
  public init(hour: Swift.Int, minutes: Swift.Int, mon: Swift.Bool, tue: Swift.Bool, wed: Swift.Bool, thu: Swift.Bool, fri: Swift.Bool, sat: Swift.Bool, sun: Swift.Bool)
  public func getTimeFormatted() -> Swift.String
  public func isMon() -> Swift.Bool
  public func isTue() -> Swift.Bool
  public func isWed() -> Swift.Bool
  public func isThu() -> Swift.Bool
  public func isFri() -> Swift.Bool
  public func isSat() -> Swift.Bool
  public func isSun() -> Swift.Bool
  @objc deinit
}
@objc public class BlueSTSDKFeatureMagnetometerNorm : OcsSmartLibrary.BlueSTSDKFeature {
  public static func getNorm(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LockVersions {
  public func getFwVersion() -> Swift.String
  public func getHwVersion() -> Swift.String
  public func getBootVersion() -> Swift.String
  public func getFwVersionMajor() -> Swift.UInt8
  public func getFwVersionMinor() -> Swift.UInt8
  public func getFwVersionBuild() -> Swift.UInt8
  public func getHwVersionMajor() -> Swift.UInt8
  public func getHwVersionMinor() -> Swift.UInt8
  public func getHwVersionBuild() -> Swift.UInt8
  public func getBootVersionMajor() -> Swift.UInt8
  public func getBootVersionMinor() -> Swift.UInt8
  public func getBootVersionBuild() -> Swift.UInt8
  @objc deinit
}
@objc public class BlueSTSDKFeatureAccelerationNorm : OcsSmartLibrary.BlueSTSDKFeature {
  public static func getNorm(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Int
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
public enum EventType : Swift.UInt8 {
  case EMPTY
  case EV_TIME_ADVANCE
  case EV_TIME_DELAY
  case EV_MECHANICAL_FAILURE
  case EV_USER_OPENING
  case EV_MASTER_OPENING
  case EV_USER_CLOSING
  case EV_INITIALIZATION
  case EV_AUTOMATIC_OPEN_RENT_TIME
  case EV_NON_VALID_MASTER_CODE
  case EV_TIMED_OUT_CODE
  case EV_OCCUPIED_CARD
  case EV_NON_VALID_CARD
  case EV_USER_OPENING_KEYPAD
  case EV_USER_CLOSING_KEYPAD
  case EV_MASTER_OPENING_KEYPAD
  case EV_MASTER_CLOSING_KEYPAD
  case EV_AUTOMATIC_OPENING
  case EV_MASTER_CLOSING
  case EV_LOW_BATTERY
  case EV_FULL_CARD
  case EV_ERASE_BT
  case EV_UNKNOWN
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Event : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public init(lockNumber: Swift.UInt32, freeLock: Swift.Bool, timestamp: Swift.UInt32, uid: [Swift.UInt8], eventCode: OcsSmartLibrary.EventType, battery: Swift.UInt8)
  public init(lockNumber: Swift.UInt32, timestamp: Swift.CLong, uid: [Swift.UInt8], eventCode: Swift.UInt8, battery: Swift.UInt8, freeLock: Swift.Bool = false)
  public func isSuccessEvent() -> Swift.Bool
  public static func getEventFromFrame(frame: Swift.String) throws -> OcsSmartLibrary.Event
  public static func getLockEventsListFromFrame(frame: Swift.String) throws -> [OcsSmartLibrary.Event]
  public func getLockNumber() -> Swift.Int
  public func getBattery() -> Swift.Int
  public func getUserCodeLength() -> Swift.Int
  public func getUserCode() -> Swift.String
  public func getDate() -> Foundation.Date
  public func getTimestamp() -> Swift.CLong
  public func getLockType() -> OcsSmartLibrary.LockType
  public func getEventCode() -> Swift.UInt8
  public func getEventType() -> OcsSmartLibrary.EventType
  @objc deinit
}
public enum PKCS7 {
}
@_inheritsConvenienceInitializers final public class CBCMAC : OcsSmartLibrary.CMAC {
  override final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  override public init(key: Swift.Array<Swift.UInt8>) throws
  @objc deinit
}
extension AES {
  convenience public init(key: Swift.String, iv: Swift.String, padding: OcsSmartLibrary.Padding = .pkcs7) throws
}
@objc public class BlueSTSDKSTM32WBOTAControlFeature : OcsSmartLibrary.BlueSTSDKFeature {
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  public func startUpload(type: OcsSmartLibrary.BlueSTSDKFwUpgradeType, address: Swift.UInt32)
  public func uploadFinishedCrcSend(crc: [Swift.UInt8], size: [Swift.UInt8])
  public func uploadFinished()
  public func cancelUpload()
  public func stopUpload()
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CodeHelper : ObjectiveC.NSObject {
  public static func getRandomUserCode(length: Swift.Int) -> Swift.String
  public static func getUserCodeForFreeProfile(length: Swift.Int) -> Swift.String
  public static func createZeroValueIntArray(arrayLength: Swift.Int) -> [Swift.Int]
  public static func fromIntToHex1Byte(i: Swift.Int) -> Swift.String
  public static func fromIntToHex2Bytes(i: Swift.Int) -> Swift.String
  public static func fromIntToHex3Bytes(i: Swift.Int) -> Swift.String
  public static func fromIntToHex4Bytes(i: Swift.Int) -> Swift.String
  public static func from1ByteToInt(byte1: Swift.UInt8) -> Swift.Int
  public static func from2BytesToInt(byte1: Swift.UInt8, byte2: Swift.UInt8) -> Swift.Int
  public static func from3BytesToInt(byte1: Swift.UInt8, byte2: Swift.UInt8, byte3: Swift.UInt8) -> Swift.Int
  public static func from4BytesToInt(byte1: Swift.UInt8, byte2: Swift.UInt8, byte3: Swift.UInt8, byte4: Swift.UInt8) -> Swift.Int
  public static func getByteFromBits(b1: Swift.Bool, b2: Swift.Bool, b3: Swift.Bool, b4: Swift.Bool, b5: Swift.Bool, b6: Swift.Bool, b7: Swift.Bool, b8: Swift.Bool) -> Swift.UInt8
  public static func getByteFromBits(b1: OcsSmartLibrary.Bit, b2: OcsSmartLibrary.Bit, b3: OcsSmartLibrary.Bit, b4: OcsSmartLibrary.Bit, b5: OcsSmartLibrary.Bit, b6: OcsSmartLibrary.Bit, b7: OcsSmartLibrary.Bit, b8: OcsSmartLibrary.Bit) -> Swift.UInt8
  @objc override dynamic public init()
  @objc deinit
}
extension String {
  public var zeroPad: Swift.String {
    get
  }
  public var fPad: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Validator {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DstZones {
  @objc deinit
}
final public class HMAC : OcsSmartLibrary.Authenticator {
  public enum Error : Swift.Error {
    case authenticateError
    case invalidInput
    public static func == (a: OcsSmartLibrary.HMAC.Error, b: OcsSmartLibrary.HMAC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Variant {
    case sha1, sha256, sha384, sha512, md5
    public static func == (a: OcsSmartLibrary.HMAC.Variant, b: OcsSmartLibrary.HMAC.Variant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(key: Swift.Array<Swift.UInt8>, variant: OcsSmartLibrary.HMAC.Variant = .md5)
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
public protocol _UInt8Type {
}
extension UInt8 : OcsSmartLibrary._UInt8Type {
}
extension UInt8 {
  public func bits() -> [OcsSmartLibrary.Bit]
  public func bits() -> Swift.String
}
public protocol Updatable {
  mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8>
  mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool, output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
}
extension Updatable {
  public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false, output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
  public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
  public mutating func update(withBytes bytes: Swift.Array<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
  public mutating func update(withBytes bytes: Swift.Array<Swift.UInt8>, isLast: Swift.Bool = false, output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
  public mutating func finish(withBytes bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public mutating func finish(withBytes bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public mutating func finish() throws -> Swift.Array<Swift.UInt8>
  public mutating func finish(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
  public mutating func finish(withBytes bytes: Swift.Array<Swift.UInt8>, output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
  public mutating func finish(output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
}
@_hasMissingDesignatedInitializers public class Constants {
  public static let MASTER_CODE_LENGTH: Swift.UInt
  public static let DEFAULT_BOOT_FILES_PATH: Swift.String
  public static let DEFAULT_APP_FW_NAME_PREFIX: Swift.String
  public static let DEFAULT_STACK_FW_NAME_PREFIX: Swift.String
  public static let DEFAULT_BLOCK_KEYPAD: Swift.Bool
  public static let DEFAULT_BUZZER_ON: Swift.Bool
  public static let DEFAULT_LED_CONFIGURATION: Swift.Int
  public static let DEFAULT_USER_MANUAL_SCAN_TIMEOUT: Swift.Int
  public static let DEFAULT_USER_SMART_SCAN_TIMEOUT: Swift.Int
  public static let DEFAULT_USER_CONNECTION_TIMEOUT: Swift.Int
  public static let DEFAULT_USER_COMMUNICATION_TIMEOUT: Swift.Int
  public static let DEFAULT_MAINTENANCE_MANUAL_SCAN_TIMEOUT: Swift.Int
  public static let DEFAULT_MAINTENANCE_PROXIMITY_SCAN_TIMEOUT: Swift.Int
  public static let DEFAULT_MAINTENANCE_CONNECTION_TIMEOUT: Swift.Int
  public static let DEFAULT_MAINTENANCE_COMMUNICATION_TIMEOUT: Swift.Int
  public static let DEFAULT_MOST_POWERFUL_RSSI_UPDATE_INTERVAL: Swift.Double
  public static let DEFAULT_MOST_POWERFUL_RSSI_TIMEOUT: Swift.Double
  public static let DEFAULT_PHONE_PROXIMITY_RSSI_VALUE: Swift.Int
  @objc deinit
}
public struct PCBC : OcsSmartLibrary.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: OcsSmartLibrary.PCBC.Error, b: OcsSmartLibrary.PCBC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: OcsSmartLibrary.BlockModeOption
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock, encryptionOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock) throws -> OcsSmartLibrary.CipherModeWorker
}
@objc public class BlueSTSDKFeatureAudioCalssification : OcsSmartLibrary.BlueSTSDKFeature {
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  public static func getAudioScene(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeatureAudioCalssification.AudioClass
  public static func getAlgorythmType(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.UInt8
  public enum AudioClass : Swift.UInt8 {
    public typealias RawValue = Swift.UInt8
    case Unknown
    case Indoor
    case Outdoor
    case InVehicle
    case BabyIsCrying
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
public struct CCM {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    case invalidParameter
    case fail
    public static func == (a: OcsSmartLibrary.CCM.Error, b: OcsSmartLibrary.CCM.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: OcsSmartLibrary.BlockModeOption
  public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(iv: Swift.Array<Swift.UInt8>, tagLength: Swift.Int, messageLength: Swift.Int, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil)
  public init(iv: Swift.Array<Swift.UInt8>, tagLength: Swift.Int, messageLength: Swift.Int, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock, encryptionOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock) throws -> OcsSmartLibrary.CipherModeWorker
}
@objc public class BlueSTSDKFeaturePredictiveFrequencyDomainStatus : OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus {
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  public static func getStatusX(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus.Status
  public static func getStatusY(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus.Status
  public static func getStatusZ(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus.Status
  public static func getWorstXFrequency(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getWorstYFrequency(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getWorstZFrequency(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getWorstXValue(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getWorstYValue(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getWorstZValue(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getWorstXPoint(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> (Swift.Float, Swift.Float)
  public static func getWorstYPoint(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> (Swift.Float, Swift.Float)
  public static func getWorstZPoint(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> (Swift.Float, Swift.Float)
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
public struct CFB : OcsSmartLibrary.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: OcsSmartLibrary.CFB.Error, b: OcsSmartLibrary.CFB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: OcsSmartLibrary.BlockModeOption
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock, encryptionOperation: @escaping OcsSmartLibrary.CipherOperationOnBlock) throws -> OcsSmartLibrary.CipherModeWorker
}
public class CMAC : OcsSmartLibrary.Authenticator {
  public enum Error : Swift.Error {
    case wrongKeyLength
    public static func == (a: OcsSmartLibrary.CMAC.Error, b: OcsSmartLibrary.CMAC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(key: Swift.Array<Swift.UInt8>) throws
  public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func authenticate(_ bytes: Swift.Array<Swift.UInt8>, cipher: OcsSmartLibrary.Cipher) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
public protocol Authenticator {
  func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
final public class Poly1305 : OcsSmartLibrary.Authenticator {
  public enum Error : Swift.Error {
    case authenticateError
    public static func == (a: OcsSmartLibrary.Poly1305.Error, b: OcsSmartLibrary.Poly1305.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>)
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Buzzer {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Encryption {
  public static let staticKey: [Swift.UInt8]
  public static let hiMsg: Foundation.Data
  public static func hexStringToByteArray(s: Swift.String) -> [Swift.UInt8]?
  public static func decryptLicense(licenseString: Swift.String) throws -> Swift.String?
  public static func encryptLicense(licenseString: Swift.String) -> Swift.String
  public static func encryptToBytes(plainText: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
public enum OcsSmartManagerError {
  case AGGRESSIVE_SCAN
  case BLUETOOTH_OR_LOCATION_DISABLED
  case ALREADY_SCANNING
  case ALREADY_CONNECTING_OR_UPDATING
  case SEND_NACK
  case RECONNECT_ERROR
  case ADMIN_PRIVILEGES_NEEDED
  case FW_UPDATE
  case FW_FILES_FORMAT
  case FW_PATH
  case FW_MAGIC_KEY
  case FW_ANTI_ROLLBACK
  public static func == (a: OcsSmartLibrary.OcsSmartManagerError, b: OcsSmartLibrary.OcsSmartManagerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ProcessDelegate {
  func onSuccess(response: Swift.String)
  func onErrorProcessDelegate(error: OcsSmartLibrary.OcsSmartManagerError)
}
public protocol ScanDelegate {
  func onCompletion()
  func onError(error: OcsSmartLibrary.OcsSmartManagerError)
  func onSearchResult(lock: OcsSmartLibrary.OcsLock)
}
public enum ScanType {
  case USER
  case MAINTENANCE
  case CONFIGURE_OCS
  case FW_UPDATE
  public static func == (a: OcsSmartLibrary.ScanType, b: OcsSmartLibrary.ScanType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OcsSmartManager : ObjectiveC.NSObject {
  public static let sharedInstance: OcsSmartLibrary.OcsSmartManager
  public func startScan(license: OcsSmartLibrary.License, timeoutSec: Swift.Int, scanDelegate: OcsSmartLibrary.ScanDelegate, minRSSI: Swift.Int = -100)
  public func startScanMaintenance(timeoutSec: Swift.Int, scanDelegate: OcsSmartLibrary.ScanDelegate, scanType: OcsSmartLibrary.ScanType, minRSSI: Swift.Int = -100)
  public func reconnectAndSendToNode(withTag: Swift.String, connectionTimeoutSec: Swift.Int, communicationTimeoutSec: Swift.Int, frame: Swift.String, callback: OcsSmartLibrary.ProcessDelegate)
  public func connectAndSend(ocsLock: OcsSmartLibrary.OcsLock, connectionTimeoutSec: Swift.Int, communicationTimeoutSec: Swift.Int, frame: Swift.String, callback: OcsSmartLibrary.ProcessDelegate)
  public func connectAndUpdateFirmware(appFwPath: Foundation.URL?, stackFwPath: Foundation.URL?, ocsLock: OcsSmartLibrary.OcsLock, callback: OcsSmartLibrary.ProcessDelegate)
  public func getUpdatePercent() -> Swift.Int
  public func stopScan()
  public func clearScanDetectedDevicesList()
  public func restartScan()
  public func cancelAllProcesses()
  public func getSdkVersion() -> Swift.String
  @objc deinit
}
extension OcsSmartManager : OcsSmartLibrary.BlueSTSDKManagerDelegate {
  @objc dynamic public func manager(_ manager: OcsSmartLibrary.BlueSTSDKManager, didDiscoverNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc dynamic public func manager(_ manager: OcsSmartLibrary.BlueSTSDKManager, didChangeDiscovery: Swift.Bool)
}
extension Array where Element == Swift.UInt8 {
  public init(hex: Swift.String)
  public func toHexString() -> Swift.String
}
extension Array where Element == Swift.UInt8 {
  @available(*, deprecated)
  public func chunks(size chunksize: Swift.Int) -> Swift.Array<Swift.Array<Element>>
  public func md5() -> [Element]
  public func sha1() -> [Element]
  public func sha224() -> [Element]
  public func sha256() -> [Element]
  public func sha384() -> [Element]
  public func sha512() -> [Element]
  public func sha2(_ variant: OcsSmartLibrary.SHA2.Variant) -> [Element]
  public func sha3(_ variant: OcsSmartLibrary.SHA3.Variant) -> [Element]
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public func crc16(seed: Swift.UInt16? = nil) -> Swift.UInt16
  public func encrypt(cipher: OcsSmartLibrary.Cipher) throws -> [Element]
  public func decrypt(cipher: OcsSmartLibrary.Cipher) throws -> [Element]
  public func authenticate<A>(with authenticator: A) throws -> [Element] where A : OcsSmartLibrary.Authenticator
}
@_hasMissingDesignatedInitializers public class Led {
  public static let LED_OFF_TYPE: Swift.Int
  public static let LED_ON_TYPE: Swift.Int
  public static let LED_ON_900_MILLIS_TYPE: Swift.Int
  public static let LED_ON_2_SECONDS_TYPE: Swift.Int
  @objc deinit
}
@objc public class BlueSTSDKFeaturePredictiveAccelerationStatus : OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus {
  public typealias Status = OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus.Status
  @objc override dynamic public func getFieldsDesc() -> [OcsSmartLibrary.BlueSTSDKFeatureField]
  public static func getStatusX(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeaturePredictiveAccelerationStatus.Status
  public static func getStatusY(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeaturePredictiveAccelerationStatus.Status
  public static func getStatusZ(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> OcsSmartLibrary.BlueSTSDKFeaturePredictiveAccelerationStatus.Status
  public static func getAccX(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getAccY(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  public static func getAccZ(_ sample: OcsSmartLibrary.BlueSTSDKFeatureSample) -> Swift.Float
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode)
  @objc override dynamic public func extractData(_ timestamp: Swift.UInt64, data: Foundation.Data, dataOffset offset: Swift.UInt32) -> OcsSmartLibrary.BlueSTSDKExtractResult
  @objc override dynamic public init()
  @objc override dynamic public init(whitNode node: OcsSmartLibrary.BlueSTSDKNode, name: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PublicConfiguration {
  public static func getPublicConfiguration(ocsLock: OcsSmartLibrary.OcsLock, frame: Swift.String, extendedLicense: OcsSmartLibrary.ExtendedLicense) throws -> OcsSmartLibrary.PublicConfiguration
  public func fromPublicConfigToEncryptedJSON() throws -> [Swift.UInt8]
  public func getLockNumber() -> Swift.Int?
  public func getLockType() -> OcsSmartLibrary.LockType?
  public func getLockStatus() -> OcsSmartLibrary.LockStatus?
  public func getLockBatteryLevel() -> Swift.Int?
  public func getLockVersions() -> OcsSmartLibrary.LockVersions?
  public func getMasterCode() -> Swift.String?
  public func getUserCode() -> Swift.String?
  public func getUserCodeLength() -> Swift.Int?
  public func getLockDate() -> Foundation.Date?
  public func getLockDateTimestamp() -> Swift.CLong?
  public func getCyclesSinceManufactured() -> Swift.CLong?
  public func getCyclesSinceLastBatteryChange() -> Swift.CLong?
  public func getAutomaticOpening() -> OcsSmartLibrary.AutomaticOpening?
  public func isBuzzerOn() -> Swift.Bool?
  public func getLed() -> Swift.Int?
  public func getDedicatedExpirationTimeDate() -> Foundation.Date?
  public func getDedicatedExpirationTimestamp() -> Swift.CLong?
  public func hasKeypadBlock() -> Swift.Bool?
  public func getRentTime() -> Swift.Int?
  public func hasAutomaticClosing() -> Swift.Bool?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Checksum {
  @objc deinit
}
extension Checksum {
  public static func crc32(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public static func crc32c(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public static func crc16(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt16? = nil) -> Swift.UInt16
}
@objc @_inheritsConvenienceInitializers public class OcsPeripheral : ObjectiveC.NSObject {
  public static func getCharacteristicsMapping() -> [CoreBluetooth.CBUUID : [Swift.AnyClass]]
  @objc override dynamic public init()
  @objc deinit
}
public protocol Cryptors : AnyObject {
  func makeEncryptor() throws -> OcsSmartLibrary.Cryptor & OcsSmartLibrary.Updatable
  func makeDecryptor() throws -> OcsSmartLibrary.Cryptor & OcsSmartLibrary.Updatable
  static func randomIV(_ blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
}
extension Cryptors {
  public static func randomIV(_ count: Swift.Int) -> Swift.Array<Swift.UInt8>
}
extension OcsSmartLibrary.LockType : Swift.Equatable {}
extension OcsSmartLibrary.LockType : Swift.Hashable {}
extension OcsSmartLibrary.LockType : Swift.RawRepresentable {}
extension OcsSmartLibrary.LockStatus : Swift.Equatable {}
extension OcsSmartLibrary.LockStatus : Swift.Hashable {}
extension OcsSmartLibrary.LockStatus : Swift.RawRepresentable {}
extension OcsSmartLibrary.BlueSTSDKFeatureAILogging.Status : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFeatureAILogging.Status : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureAILogging.Status : Swift.RawRepresentable {}
extension OcsSmartLibrary.AES.Error : Swift.Equatable {}
extension OcsSmartLibrary.AES.Error : Swift.Hashable {}
extension OcsSmartLibrary.AES.Variant : Swift.Equatable {}
extension OcsSmartLibrary.AES.Variant : Swift.Hashable {}
extension OcsSmartLibrary.AES.Variant : Swift.RawRepresentable {}
extension OcsSmartLibrary.SHA2.Variant : Swift.Equatable {}
extension OcsSmartLibrary.SHA2.Variant : Swift.Hashable {}
extension OcsSmartLibrary.PKCS5.PBKDF2.Error : Swift.Equatable {}
extension OcsSmartLibrary.PKCS5.PBKDF2.Error : Swift.Hashable {}
extension OcsSmartLibrary.Padding : Swift.Equatable {}
extension OcsSmartLibrary.Padding : Swift.Hashable {}
extension OcsSmartLibrary.SHA3.Variant : Swift.Equatable {}
extension OcsSmartLibrary.SHA3.Variant : Swift.Hashable {}
extension OcsSmartLibrary.GCM.Mode : Swift.Equatable {}
extension OcsSmartLibrary.GCM.Mode : Swift.Hashable {}
extension OcsSmartLibrary.GCM.Error : Swift.Equatable {}
extension OcsSmartLibrary.GCM.Error : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureFitnessActivity.ActivityType : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFeatureFitnessActivity.ActivityType : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureFitnessActivity.ActivityType : Swift.RawRepresentable {}
extension OcsSmartLibrary.PKCS5.PBKDF1.Error : Swift.Equatable {}
extension OcsSmartLibrary.PKCS5.PBKDF1.Error : Swift.Hashable {}
extension OcsSmartLibrary.PKCS5.PBKDF1.Variant : Swift.Equatable {}
extension OcsSmartLibrary.PKCS5.PBKDF1.Variant : Swift.Hashable {}
extension OcsSmartLibrary.NodeBoardType : Swift.Equatable {}
extension OcsSmartLibrary.NodeBoardType : Swift.Hashable {}
extension OcsSmartLibrary.NodeBoardType : Swift.RawRepresentable {}
extension OcsSmartLibrary.BlueSTSDKFwUpgradeError : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFwUpgradeError : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFwUpgradeType : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFwUpgradeType : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFwUpgradeType : Swift.RawRepresentable {}
extension OcsSmartLibrary.ChaCha20.Error : Swift.Equatable {}
extension OcsSmartLibrary.ChaCha20.Error : Swift.Hashable {}
extension OcsSmartLibrary.Bit : Swift.Equatable {}
extension OcsSmartLibrary.Bit : Swift.Hashable {}
extension OcsSmartLibrary.Bit : Swift.RawRepresentable {}
extension OcsSmartLibrary.OCB.Mode : Swift.Equatable {}
extension OcsSmartLibrary.OCB.Mode : Swift.Hashable {}
extension OcsSmartLibrary.OCB.Error : Swift.Equatable {}
extension OcsSmartLibrary.OCB.Error : Swift.Hashable {}
extension OcsSmartLibrary.HKDF.Error : Swift.Equatable {}
extension OcsSmartLibrary.HKDF.Error : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.Algorithm : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.Algorithm : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.Algorithm : Swift.RawRepresentable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.PoseEstimation : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.PoseEstimation : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.PoseEstimation : Swift.RawRepresentable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.VerticalContext : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.VerticalContext : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.VerticalContext : Swift.RawRepresentable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.DeskTypeDetection : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.DeskTypeDetection : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureMotionAlogrithm.DeskTypeDetection : Swift.RawRepresentable {}
extension OcsSmartLibrary.OFB.Error : Swift.Equatable {}
extension OcsSmartLibrary.OFB.Error : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureActivity.ActivityType : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFeatureActivity.ActivityType : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureActivity.ActivityType : Swift.RawRepresentable {}
extension OcsSmartLibrary.CipherError : Swift.Equatable {}
extension OcsSmartLibrary.CipherError : Swift.Hashable {}
extension OcsSmartLibrary.CBC.Error : Swift.Equatable {}
extension OcsSmartLibrary.CBC.Error : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus.Status : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus.Status : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeaturePredictiveStatus.Status : Swift.RawRepresentable {}
extension OcsSmartLibrary.CTR : OcsSmartLibrary.BlockMode {}
extension OcsSmartLibrary.CTR.Error : Swift.Equatable {}
extension OcsSmartLibrary.CTR.Error : Swift.Hashable {}
extension OcsSmartLibrary.LicenseException : Swift.Equatable {}
extension OcsSmartLibrary.LicenseException : Swift.Hashable {}
extension OcsSmartLibrary.IncorrectFrameException : Swift.Equatable {}
extension OcsSmartLibrary.IncorrectFrameException : Swift.Hashable {}
extension OcsSmartLibrary.Blowfish.Error : Swift.Equatable {}
extension OcsSmartLibrary.Blowfish.Error : Swift.Hashable {}
extension OcsSmartLibrary.Rabbit.Error : Swift.Equatable {}
extension OcsSmartLibrary.Rabbit.Error : Swift.Hashable {}
extension OcsSmartLibrary.EventType : Swift.Equatable {}
extension OcsSmartLibrary.EventType : Swift.Hashable {}
extension OcsSmartLibrary.EventType : Swift.RawRepresentable {}
extension OcsSmartLibrary.HMAC.Error : Swift.Equatable {}
extension OcsSmartLibrary.HMAC.Error : Swift.Hashable {}
extension OcsSmartLibrary.HMAC.Variant : Swift.Equatable {}
extension OcsSmartLibrary.HMAC.Variant : Swift.Hashable {}
extension OcsSmartLibrary.PCBC.Error : Swift.Equatable {}
extension OcsSmartLibrary.PCBC.Error : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureAudioCalssification.AudioClass : Swift.Equatable {}
extension OcsSmartLibrary.BlueSTSDKFeatureAudioCalssification.AudioClass : Swift.Hashable {}
extension OcsSmartLibrary.BlueSTSDKFeatureAudioCalssification.AudioClass : Swift.RawRepresentable {}
extension OcsSmartLibrary.CCM : OcsSmartLibrary.BlockMode {}
extension OcsSmartLibrary.CCM.Error : Swift.Equatable {}
extension OcsSmartLibrary.CCM.Error : Swift.Hashable {}
extension OcsSmartLibrary.CFB.Error : Swift.Equatable {}
extension OcsSmartLibrary.CFB.Error : Swift.Hashable {}
extension OcsSmartLibrary.CMAC.Error : Swift.Equatable {}
extension OcsSmartLibrary.CMAC.Error : Swift.Hashable {}
extension OcsSmartLibrary.Poly1305.Error : Swift.Equatable {}
extension OcsSmartLibrary.Poly1305.Error : Swift.Hashable {}
extension OcsSmartLibrary.OcsSmartManagerError : Swift.Equatable {}
extension OcsSmartLibrary.OcsSmartManagerError : Swift.Hashable {}
extension OcsSmartLibrary.ScanType : Swift.Equatable {}
extension OcsSmartLibrary.ScanType : Swift.Hashable {}
